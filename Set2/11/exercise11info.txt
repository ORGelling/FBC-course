Exercise 11: Integer types in non-canonical loops

We make a program using iostream and string headers. String will be useful 
for creating the output bit representation and component sum. We could 
possibly have simply used chars but string comes with to_string and easy
concatenation with +, and is now part of the course's scope.

The program asks for user input, initialises needed variables, and then 
cycles through it in a for loop. This loop uses a shifting bitmask as its 
iterator, starting with only the MSB set. Each loop this bit will move one 
step to the right. We start here to more easily concatenate our binary and 
numerical values strings. 

Inside the for loop we store the value of the currently checked bit, and 
then, if it is nonzero, append it to the string that stores the values and 
append a 1 to the binary output string. If it is zero a 0 is added to the 
binary. If, after the loop, there was no value added, we set values to 0.

To retrieve the signedness of the MSB we cast it to long long as we are 
appending its value to the values string.

Finally we output the rest of the required information: "binary" and 
"values".

Our source file is called "exercise11.cc", and we cannot hand in an 
executable program, but for this to be called as ./complement we must simply 
compile it with the "-o complement" command added.
