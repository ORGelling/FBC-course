Exercise 32:

Learn to use precompiled headers by compiling the cursist program

We are using make with Jurjen's Makefile, and run it with the command
time make PCH=NO

This compilation and linking entirely without PCH's. The (user) time we get 
for this is:
    2m29s

Since we notice that an icmconf file comes with the precompile zip, we also
ran: "time icmbuild program" from inside the precompile directory, while 
making sure "#define SPCH" was commented out. We get a time:
    0m55s
Which is surprisingly fast. We will investigate. We run the same compilation,
but this time with "#define PRECOMP" not commented out. It takes us:
    0m18s

The sizes of our precompiled (.gch) header files are (all neatly ordered in
the /tmp/gch directory even!):

48M arg.ih.gch
52M datetime.ih.gch
33M exception.ih.gch
27M iuo.ih.gch
44M keys.ih.gch
41M main.ih.gch
38M mbuf.ih.gch
38M mstream.ih.gch
36M string.ih.gch
44M student.ih.gch
53M students.ih.gch

Total: 455M

These are, especially relatively speaking, quite sizeable!

Now on to the big one, the SPCH! We turn off the "#define PRECOMP" setting,
but turn on the "#define SPCH" one. We get a time of:
    0m14s

with a size:
57M spch.gch

Now we run the latter again with the "#define MULTICOMP" flag on. Something
strange is happening. The compilation happens in barely 5 seconds now, but my
time program is telling me it took 25 seconds of user time, but 4 seconds of 
real time:
real	0m3,903s
user	0m25,222s
sys	    0m5,558s

If we compare this to the compilation without the MULTICOMP flag set:
real	0m17,312s
user	0m13,543s
sys	    0m3,722s

We see some clear discrepancies. I have timed it on my phone and notice that
the "real" time result is the one that I actually experience. We assume that
user time here is all the spent time working on this task by the different CPU
cores. We note that ccache was not installed on my computer yet. When we do
the same and run "time icmbuild program" (with ccache prepended to g++ in the
icmconf file) we get:
real	0m6,452s
user	0m49,545s
sys	    0m9,807s

It took 0m50s of "user" time, but only about 6.5 seconds of real time.

If we run "icmbuild clean" and then run our same build command as before we
now have a user time of 
    0m1s.

Clearly, and as Frank showed during the tutorial a little while ago, ccache is
storing compiled files to be reused even if we remove them from our
directories. This certainly speeds up the process quite a bit, but is also not
exactly a fair reference to a full compilation, as it requires a (partially) 
successful compilation to have been done before.
