Exercise 33:

Explain different aspects about pointers

Q1: What differences exist between pointer variables and arrays?
A1: Arrays are simply a number. They represent the memory address of an array
of data. Pointers, on the other hand, are variables. They point towards memory
addresses, but can be reassigned. Pointers have only the size (in bytes) of a
pointer variable, whereas calling sizeof(an array) gives you the total size
of all the data in that array.

Q2: What differences exist between pointer variables and reference variables?
A2: Reference variables are aliases for other variables declared elsewhere.
They cannot be reassigned and act simply like the initial variable name does.
Pointers, in turn, (again) point towards a location in memory, and have to be
"dereferenced" before the actual value that is stored *in* that memory is
reached, and can be changed.

Q3: How is element [3][2] reached:
S1: for variable "int array[20][30]"
A:  "array" is an array of 20 arrays of 30 ints. The location of this element
is quite easily found with the array indices. Drawing included in following 
email.

S2: for variable "int *pointer[20]"
A:  "pointer" is an array of 20 pointers to (presumably) 30 ints. We follow
the pointer to the memory address  of the (4th) array of ints, and then select
the 3rd element inside that array, like so: *(pointer[3] + 2).
.
Drawing to follow too!

Q4: Pointer arithmetic is the act of doing arithmetic operations on pointers.
One can take a pointer and add or subtract a number from it (without
dereferencing it first) to move the location it points to around by that many
steps. Take a pointer that points to the first element of an array of 10
ints. If I take *(pointer + 3) it will now give me the value in the fourth
element of that array. Beyond that, if you subtract a pointer that points to 
one position in an array from the pointer that points to anotherposition in 
that same array you will also find the amount of elements between them.
