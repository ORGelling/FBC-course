Exercise 09: Visiting all info in a file

We must write a program that accepts a txt file and searches through it to 
count a's, e's, and i's, independent from capitalisation.

We cannot use <fstream>, so loading the file into the 
program must be done with cin. We use redirection as the program is being 
called from the commandline, like so:

./a.out < flow.txt

The program reads a word from the file each time cin is called. We do this 
inside a for loop, initialising the word inside the condition to keep it 
in as small a scope as possible. We use a reference to minimise memory usage.
Instead of making a copy of each letter we use a reference to the original 
character in the string. We then use another for loop to go through the 
contents of this word, again initialising the looping variable inside the 
for's condition for minimal scope. We are not allowed to use functions 
outside the 'scope' (ha) of the covered material, so a second for loop seems 
most fitting. 
// HB: this explanation is SF: it is obvious to us that you're avoiding a copy
// HB: or restricting a variables scope from the code itself

We know that getline can also be used here, but as it would still require two
nested for loops we do not see much distinction between parsing the file per
line or per word.
// HB: although in this case it doesn't matter much, explaining design choices
// HB: like these can help us see you understood the material and helps us be
// HB: way more lenient, so it's good you thought of mentioning
// HB: (we do indeed use getline in our solution)

A switch statement directs our counts to increase when a countable letter is 
found encountered. Cases are present for both LC and UC letters, serving as
dual entrypoints to the relevant count increasing. There is no default case 
since we don't need anything to happen for any of the other characters that
come by.
// HB: again, this is obvious to us

We note that it could be posisble to use strcasecmp() to compare without 
having to consider the casing, or tolower() or toupper() to set all the 
received letters to a specific case, but that would require using C's cstring
library, which we can easily avoid using dual entry points. We could also use
multiple sequenced if statements that check for the lower or upper case 
letters, but this looks much tidier and more readable to us.
// HB: agreed. in fact, I find the difference in tidiness large enough to mark
// HB: people down for not using a switch here

Finally we use cout to show our answer, and have redirected into a file like
such:

./a.out < flow.txt > output.txt

// HB: I hope I'm not discouraging you too much for writing an accompanying
// HB: explanation, just try and keep yourself from stating the obvious :)
// HB:
// HB: it also sometimes gives me an opportunity to answer a question or
// HB: check your reasoning even if the conclusion is correct, so do keep
// HB: them going as much as you wish :)
// HB:

